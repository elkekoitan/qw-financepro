Proje Adı: Finansal Yatırım Platformu (Monolitik Mimari)
1. Proje Tanımı
Bu platform, finansal yatırımcılara kişiselleştirilmiş danışmanlık hizmeti sunan, piyasa haberlerini anlık olarak izleyen ve alım/satım sinyalleri üreten bir sistemdir. Kullanıcılar, Telegram, WhatsApp veya Discord üzerinden bu hizmetlere erişebilir. Sistem, RAG modellerini kullanarak bilgiyi derlerken, hızlı bir şekilde işlem yapmak için Cloudflare Workers'a dayanır.

2. Teknoloji Yığını
Backend:
Framework: Node.js (Express.js)
Veritabanı: Supabase (PostgreSQL tabanlı)
Edge İşlemcisi: Cloudflare Workers
RAG Modelleri: Hugging Face Transformers veya LangChain
API Entegrasyonları:
Piyasa Verileri: Yahoo Finance API, Alpha Vantage API
Ekonomik Takvim: Investing.com API
Mesajlaşma Platformları: Telegram Bot API, Twilio (WhatsApp), Discord Webhooks
Frontend (Mobil Uygulama İçin):
API Endpointleri: Supabase ve Cloudflare Workers aracılığıyla oluşturulan RESTful API'ler.
Teknoloji: Flutter veya React Native (Daha Sonra Geliştirilecek)
3. Ana Bölümler
A. Yatırım Danışmanlık Botu
Bu bot, kullanıcının yatırım davranışlarına göre kişiselleştirilmiş önerilerde bulunur. Kullanıcıların risk profillerini analiz eder ve uygun stratejiler önerir.

Özellikler:
Kullanıcı Profil Analizi:
Risk toleransı belirleme.
Varlık dağılımı analizi.
Hedeflerin (örneğin emeklilik, ev alımı) tanımlanması.
Soru-Cevap Sistemi:
Kullanıcıların sorularına cevap vermek için RAG modeli kullanılır.
Örnek sorular:
"Risk toleransım orta seviye, hangi hisseleri tercih etmeliyim?"
"En iyi altın yatırım stratejisi nedir?"
Kişiselleştirilmiş Strateji Oluşturma:
Kullanıcıya özel化的 yatırım planları sunma.
Teknik Detaylar:
Veritabanı Tablosu:
sql
Copy
1
2
3
4
5
6
7
⌄
CREATE TABLE user_investment_profiles (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(id),
    risk_tolerance VARCHAR(50),
    asset_allocation JSONB,
    goals TEXT
);
API Endpoint:
json
Copy
1
2
3
4
5
6
7
8
9
10
11
12
⌄
⌄
⌄
⌄
{
  "endpoints": {
    "/api/investment/advice": {
      "method": "POST",
      "description": "Yatırım önerisi için endpoint.",
      "parameters": {
        "user_id": "int",
        "query": "string"
      }
    }
  }
}
B. Ekonomik Takvim ve Haberler Botu
Bu bot, ekonomik takvimleri ve piyasa haberlerini anlık olarak izler ve kullanıcıları önemli olaylar hakkında bilgilendirir.

Özellikler:
Ekonomik Takvim İzleme:
Önemli ekonomik olayları (örneğin FED kararları, istihdam verileri) takip etme.
Anlık bildirimler gönderme.
Piyasa Haberleri:
En son piyasa gelişmelerini paylaşma.
Belirli hisse senetleri veya varlıkları izleme.
Teknik Detaylar:
Veritabanı Tablosu:
sql
Copy
1
2
3
4
5
6
7
⌄
CREATE TABLE economic_calendar (
    id SERIAL PRIMARY KEY,
    event_name VARCHAR(255),
    event_date TIMESTAMP,
    impact_level VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
API Endpoint:
json
Copy
1
2
3
4
5
6
7
8
9
10
11
12
⌄
⌄
⌄
⌄
{
  "endpoints": {
    "/api/news": {
      "method": "GET",
      "description": "Piyasa haberlerini çekmek için endpoint."
    },
    "/api/calendar": {
      "method": "GET",
      "description": "Ekonomik takvim olaylarını çekmek için endpoint."
    }
  }
}
C. Sinyal Üretici Bot
Bu bot, kullanıcıların belirlediği parametreler doğrultusunda alım/satım sinyalleri üretir. Hızlı bir şekilde çalışır ve Cloudflare Workers aracılığıyla işlem yapar.

Özellikler:
Sinyal Oluşturma:
Kullanıcıların ayarladığı teknik göstergeleri (örneğin RSI, MACD) temel alarak sinyaller üretme.
Anlık fiyat hareketlerini analiz etme.
Kullanıcı Ayarları:
Kullanıcılar, hangi varlıkları izleyeceğini ve hangi koşullarda sinyal alacağını belirleyebilir.
Hızlı Bildirimler:
Telegram, WhatsApp veya Discord üzerinden anlık sinyaller gönderme.
Teknik Detaylar:
Veritabanı Tablosu:
sql
Copy
1
2
3
4
5
6
7
8
⌄
CREATE TABLE signal_settings (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(id),
    asset_symbol VARCHAR(50),
    indicator_type VARCHAR(50),
    threshold_value DECIMAL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
API Endpoint:
json
Copy
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
⌄
⌄
⌄
⌄
⌄
{
  "endpoints": {
    "/api/signals": {
      "method": "GET",
      "description": "Alım/satım sinyallerini çekmek için endpoint."
    },
    "/api/settings": {
      "method": "POST",
      "description": "Kullanıcı ayarlarını güncellemek için endpoint.",
      "parameters": {
        "asset_symbol": "string",
        "indicator_type": "string",
        "threshold_value": "decimal"
      }
    }
  }
}
4. Clean Architecture Uygulaması
Katmanlar:
Presentation Layer:
Frontend uygulamaları (Telegram Bot, Discord Bot, WhatsApp API).
Kullanıcı arayüzü bileşenleri.
Application Layer:
Business kurallarını yöneten servisler.
Örnek: InvestmentService, NewsService, SignalService.
Domain Layer:
Temel entiteler ve işlemler.
Örnek: User, InvestmentProfile, EconomicEvent.
Infrastructure Layer:
Veritabanı işlemleri (Supabase).
API entegrasyonları (Yahoo Finance, Investing.com).
5. Monolitik Mimaride Tasarım
Ana Modüller:
Authentication Module:
Kullanıcı oturum açma ve kaydolma işlemleri.
Investment Module:
Yatırım danışmanlık botu işlemleri.
News Module:
Ekonomik takvim ve haberler botu işlemleri.
Signal Module:
Sinyal üretici bot işlemleri.
Veritabanı Şeması:
sql
Copy
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
⌄
⌄
⌄
⌄
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(255) UNIQUE,
    password_hash VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE investment_profiles (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(id),
    risk_tolerance VARCHAR(50),
    asset_allocation JSONB,
    goals TEXT
);

CREATE TABLE economic_events (
    id SERIAL PRIMARY KEY,
    event_name VARCHAR(255),
    event_date TIMESTAMP,
    impact_level VARCHAR(50)
);

CREATE TABLE signal_settings (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(id),
    asset_symbol VARCHAR(50),
    indicator_type VARCHAR(50),
    threshold_value DECIMAL
);
6. Hızlı Çalışan Sinyal Üretici
Cloudflare Workers Kullanımı:
Triggerlar:
Fiyat değişikliklerini anlık olarak izle.
Kullanıcı ayarlarına göre sinyaller oluştur.
Örnek Kod:
javascript
Copy
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
⌄
⌄
⌄
⌄
⌄
⌄
export default {
  async fetch(request, env) {
    const url = new URL(request.url);
    if (url.pathname === '/api/signals') {
      const data = await fetch('https://api.example.com/prices');
      const prices = await data.json();

      // Sinyal oluşturma mantığı
      const signals = prices.map(price => {
        if (price.value > price.threshold) {
          return { symbol: price.symbol, action: 'BUY' };
        } else {
          return { symbol: price.symbol, action: 'SELL' };
        }
      });

      return new Response(JSON.stringify(signals), { status: 200 });
    }

    return new Response("Not Found", { status: 404 });
  }
};
7. Mobil Uygulama İçin Endpointler
RESTful API:
Kullanıcı Bilgileri:
/api/users
Yatırım Danışmanlığı:
/api/investment/advice
Ekonomik Takvim:
/api/calendar
Sinyaller:
/api/signals
GraphQL API:
Eğer daha karmaşık sorgular gerekirse, GraphQL endpointleri de oluşturulabilir.
8. Tetikleme (Trigger) Sistemleri
Telegram:
Bot API'si aracılığıyla tetiklenir.
Örnek komut: /signal veya /advice.
WhatsApp:
Twilio API'si aracılığıyla tetiklenir.
Örnek mesaj: "Get Signal".
Discord:
Webhooklar aracılığıyla tetiklenir.
Örnek komut: !signal.
9. Performans Optimizasyonu
Edge İşlemcisi: Cloudflare Workers, sinyal üretimi gibi zaman kritik işlemleri hızlandırır.
Veritabanı İndeksleme: Supabase'te sık kullanılan alanlara indeks ekleyerek sorgu sürelerini azaltırız.
Caching: Redis gibi bir cache sistemi kullanarak tekrarlayan verileri depolarız.
